# -*- coding: utf-8 -*-
"""skywalker

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jRcTf38w7WdICmMjlQZiY045lS55FW6I
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.impute import KNNImputer

class Skywalker:
    def __init__(self, skywalker):
        self.skywalker = skywalker

    def clean_data(self):
        self.skywalker = self._han_solo(self.skywalker)
        self.skywalker = self._leia_organa(self.skywalker)
        self.skywalker = self._ben_solo(self.skywalker)
        self.skywalker = self._luke_skywalker(self.skywalker)
        self.skywalker = self._jaina_solo(self.skywalker)
        self.skywalker = self._shmi_skywalker(self.skywalker)
        self.skywalker = self._jacen_solo(self.skywalker)
        self.skywalker = self._anakin_solo(self.skywalker)
        self.skywalker = self._padme_skywalker(self.skywalker)
        self.skywalker = self._obi_wan_skywalker(self.skywalker)
        self.skywalker = self._rey_skywalker(self.skywalker)
        self.skywalker = self._kylo_ren(self.skywalker)
        self.skywalker = self._anakin_skywalker(self.skywalker)
        return self.skywalker

    def _han_solo(self, skywalker):
        return skywalker.dropna()

    def _leia_organa(self, skywalker):
        for column in skywalker.columns:
            if skywalker[column].dtype == 'object':
                try:
                    skywalker.loc[:, column] = skywalker[column].astype(int)
                except ValueError:
                    continue
        return skywalker

    def _ben_solo(self, skywalker):
        if 'year' in skywalker.columns:
            skywalker.loc[:, 'year'] = skywalker['year'].fillna(method='ffill').fillna(method='bfill')
        return skywalker

    def _luke_skywalker(self, skywalker):
        for column in skywalker.select_dtypes(include=['int', 'float']).columns:
            mean_value = skywalker[column].mean()
            median_value = skywalker[column].median()
            skywalker.loc[:, column] = skywalker[column].fillna(mean_value)
        return skywalker

    def _jaina_solo(self, skywalker):
        for column in skywalker.select_dtypes(include=['int', 'float']).columns:
            q1 = skywalker[column].quantile(0.25)
            q3 = skywalker[column].quantile(0.75)
            iqr = q3 - q1
            lower_bound = q1 - 1.5 * iqr
            upper_bound = q3 + 1.5 * iqr
            skywalker.loc[:, column] = skywalker[column].clip(lower_bound, upper_bound)
        return skywalker

    def _shmi_skywalker(self, skywalker):
        for column in skywalker.select_dtypes(include=['object']).columns:
            skywalker.loc[:, column] = skywalker[column].apply(lambda x: x.strip().lower() if isinstance(x, str) else x)
        return skywalker

    def _jacen_solo(self, skywalker):
        return skywalker.drop_duplicates()

    def _anakin_solo(self, skywalker):
        scaler = StandardScaler()
        skywalker[skywalker.select_dtypes(include=['int', 'float']).columns] = scaler.fit_transform(skywalker.select_dtypes(include=['int', 'float']))
        return skywalker

    def _padme_skywalker(self, skywalker):
        return pd.get_dummies(skywalker, drop_first=True)

    def _obi_wan_skywalker(self, skywalker):
        imputer = KNNImputer()
        skywalker[skywalker.select_dtypes(include=['int', 'float']).columns] = imputer.fit_transform(skywalker.select_dtypes(include=['int', 'float']))
        return skywalker

    def _rey_skywalker(self, skywalker):
        skywalker.replace({'\$': '', ',': ''}, regex=True, inplace=True)
        return skywalker

    def _kylo_ren(self, skywalker):
        for column in skywalker.select_dtypes(include=['int', 'float']).columns:
            skywalker.loc[:, column + '_bin'] = pd.qcut(skywalker[column], q=4, labels=False)
        return skywalker

    def _anakin_skywalker(self, skywalker):
        for column in skywalker.columns:
            if skywalker[column].dtype == 'object':
                skywalker.loc[:, column] = skywalker[column].apply(lambda x: x.strip() if isinstance(x, str) else x)
        return skywalker

# Example usage
data = {
    'name': ['Luke', 'Leia', 'Han', None],
    'age': ['25', '29', '32', None],
    'year': [2020, None, 2019, None],
    'height': [180, None, 175, 170],
    'category': ['Jedi', 'Princess', 'Smuggler', 'Sith']
}

df = pd.DataFrame(data)

skywalker_tool = Skywalker(df)
cleaned_df = skywalker_tool.clean_data()
print(cleaned_df)

